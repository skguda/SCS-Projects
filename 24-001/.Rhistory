slurryDF
slurryDF = read.csv("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2Graph.txt", header=TRUE)
slurryDF
slurryDF = read.csv("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2Graph.txt", header=TRUE)
slurryDF
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(faraway)
# load data
data <- read_excel("/Users/youhashin/Library/CloudStorage/OneDrive-purdue.edu/Documents/SCS/24-001 [Joshua Martin]/EggWhiteData.xlsx")
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\EggWhiteData.xlsx")
#"/Users/youhashin/Library/CloudStorage/OneDrive-purdue.edu/Documents/SCS/24-001 [Joshua Martin]/EggWhiteData.xlsx")
head(data)
str(data)
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(data$Antimicrobial)
# set `Day` as factor
data$Day <- as.factor(data$Day)
# rename T. Replicate
data$t_rep <- data$"T. Replicate"
# rename B. Replicate
data$b_rep <- as.factor(data$"B. Replicate")
# rename CFU/g to y
data$y <- data$"CFU/g (LOD=10)"
# set t_rep as factor
data$t_rep <- as.factor(data$t_rep)
# set b_rep as factor
data$b_rep <- as.factor(data$b_rep)
# Display the first few rows of the data
head(data)
# Display the structure of the data
str(data)
# Assuming your data is in a dataframe named 'eggwhite_data'
# Group by the relevant factors (excluding technical replicates)
# and calculate the mean CFU/g for each group
grouped_data <- data %>%
group_by(Day, Antimicrobial, b_rep) %>%
summarise(Avg_y = mean(y, na.rm = TRUE))
# Display the first few rows of the averaged data
head(grouped_data)
grouped_data
# create new col that takes log base 10 of Avg_y
grouped_data$log_y <- log10(grouped_data$Avg_y)
# Display the first few rows of the averaged data
grouped_data
# Display the structure of the averaged data
str(grouped_data)
# export grouped_data to excel
# write.csv(grouped_data, "EggWhiteData_Avg.csv")
# plot histogram and kernel for log_y
hist(grouped_data$log_y)
plot(density(grouped_data$log_y))
library(stats)
model <- lm(log_y ~ Day * Antimicrobial, data = grouped_data)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
sumary(model)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(model))
# Print the results
print(tukey_result)
# Plotting the results
plot(tukey_result)
# create QQ plot of residuals
qqnorm(model$residuals)
# add a reference line
qqline(model$residuals)
# create a histogram of residuals
hist(model$residuals)
# create a kernel density plot of residuals
plot(density(model$residuals))
# create a scatter plot of residuals vs. fitted values
plot(model$fitted.values, model$residuals)
slurryDF = read.csv("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2Graph.txt", header=TRUE)
# set `Antimicrobial` as factor
slurryDF$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
slurryDF$Day <- as.factor(slurryDF$Day)
slurryDF
slurryDF = read.csv("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2Graph.txt", header=TRUE)
# set `Antimicrobial` as factor
slurryDF$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
slurryDF$Day <- as.factor(slurryDF$Day)
#CFU in this data set is already the average, hence no need to group and aggregate the results
# Create the log CFU variable
slurryDF$logCFU <- log(slurryDF$CFU)
slurryDF
# plot histogram and kernel for logCFU
hist(slurryDF$logCFU)
plot(density(slurryDF$logCFU))
# plot histogram and kernel for logCFU
hist(slurryDF$CFU)
plot(density(slurryDF$logCFU))
# plot histogram and kernel for logCFU
hist(slurryDF$CFU)
plot(density(slurryDF$CFU))
# plot histogram and kernel for CFU and logCFU
hist(slurryDF$CFU)
plot(density(slurryDF$CFU))
hist(slurryDF$logCFU)
plot(density(slurryDF$logCFU))
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = slurryDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = slurryDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
library(stats)
model <- lm(CFU ~ Day * Antimicrobial, data = slurryDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = slurryDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
summary(model)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(model))
# Print the results
print(tukey_result)
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\EggWhiteData.xlsx\\Slurry2Graph - Copy")
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2Graph - Copy.xlsx")
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2Graphs - Copy.xlsx")
#"/Users/youhashin/Library/CloudStorage/OneDrive-purdue.edu/Documents/SCS/24-001 [Joshua Martin]/EggWhiteData.xlsx")
head(data)
str(data)
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(data$Antimicrobial)
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2Graphs - Copy.xlsx")
#"/Users/youhashin/Library/CloudStorage/OneDrive-purdue.edu/Documents/SCS/24-001 [Joshua Martin]/EggWhiteData.xlsx")
head(data)
str(data)
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(data$Treatment)
# set `Day` as factor
data$Day <- as.factor(data$Day)
# rename T. Replicate
data$t_rep <- data$"T. Replicate"
# rename B. Replicate
data$b_rep <- as.factor(data$"B. Replicate")
data = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
data
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
head(slurryDF)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
head(slurryDF)
str(slurryDF)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(data$Antimicrobial)
# set `Day` as factor
data$Day <- as.factor(data$Day)
head(slurryDF)
str(slurryDF)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
data$Day <- as.factor(slurryDF$Day)
head(slurryDF)
str(slurryDF)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
data$Day <- as.factor(slurryDF$Day)
head(slurryDF)
str(slurryDF)
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\EggWhiteData.xlsx")
#"/Users/youhashin/Library/CloudStorage/OneDrive-purdue.edu/Documents/SCS/24-001 [Joshua Martin]/EggWhiteData.xlsx")
head(data)
str(data)
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(data$Treatment)
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\EggWhiteData.xlsx")
#"/Users/youhashin/Library/CloudStorage/OneDrive-purdue.edu/Documents/SCS/24-001 [Joshua Martin]/EggWhiteData.xlsx")
head(data)
str(data)
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(data$Antimicrobial)
# set `Day` as factor
data$Day <- as.factor(data$Day)
# rename T. Replicate
data$t_rep <- data$"T. Replicate"
# rename B. Replicate
data$b_rep <- as.factor(data$"B. Replicate")
# rename CFU/g to y
data$y <- data$"CFU/g (LOD=10)"
# set t_rep as factor
data$t_rep <- as.factor(data$t_rep)
# set b_rep as factor
data$b_rep <- as.factor(data$b_rep)
# Display the first few rows of the data
head(data)
# Display the structure of the data
str(data)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
slurryDF$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
slurryDF$Day <- as.factor(slurryDF$Day)
head(slurryDF)
str(slurryDF)
slurryDF
slurryDF[,c(1,2,6,8)]
slurryDF[,c(1,2,6,7,8)]
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
slurryDF$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
slurryDF$Day <- as.factor(slurryDF$Day)
# Creates a log cfu factor
slurryDF$logCFU <- log(slurryDF$`CFU/mL...8`)
head(slurryDF)
str(slurryDF)
slurryDF[,c(1,2,6,7,8,9)]
# plot histogram and kernel for log_y
hist(slurryDF$logCFU)
plot(density(slurryDF$logCFU))
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = slurryDF)
tempDF = slurryDF[complete.cases(slurryDF),]
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = tempDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
tempDF = slurryDF[complete.cases(slurryDF),]
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = tempDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = tempDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
summary(model)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(model))
# Print the results
print(tukey_result)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(model))
# Print the results
print(tukey_result)
plot(tukey_result)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(model))
# Print the results
print(tukey_result)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(model))
# Print the results
print(tukey_result)
# create QQ plot of residuals
qqnorm(model$residuals)
# add a reference line
qqline(model$residuals)
# create a histogram of residuals
hist(model$residuals)
# create a kernel density plot of residuals
plot(density(model$residuals))
# create a scatter plot of residuals vs. fitted values
plot(model$fitted.values, model$residuals)
library(ggplot2)
slurryDF = slurryDF[complete.cases(slurryDF),]
slurryDF
library(ggplot2)
slurryDF = slurryDF[complete.cases(slurryDF),]
slurryDF
ggplot(slurryDF, aes(x=Antimicrobial, y = logCFU)) + geom_point()
ggplot(slurryDF, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point()
library(ggplot2)
library(dplyr)
Avgs <- slurryDF %>%
group_by(Antimicrobial) %>%
mutate(Avg = mean(logCFU))
Avgs
Avgs <- slurryDF %>%
group_by(Antimicrobial) %>%
mutate(group_avg = mean(logCFU))
Avgs
ggplot(slurryDF, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point()
ggplot(Avgs, aes(x=Antimicrobial, y = group_avg)) + geom_point()
ggplot(slurryDF, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
library(readxl)
library(dplyr)
library(faraway)
library(ggplot2)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
slurryDF$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
slurryDF$Day <- as.factor(slurryDF$Day)
# Creates a log cfu factor
slurryDF$logCFU <- log(slurryDF$`CFU/mL...8`)
head(slurryDF)
str(slurryDF)
library(ggplot2)
library(dplyr)
slurryDF = slurryDF[complete.cases(slurryDF),]
slurryDF
Avgs <- slurryDF %>%
group_by(Antimicrobial) %>%
mutate(group_avg = mean(logCFU))
slurryDF_new = Avgs
slurryDF_new
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point() + geom_point(aes(x=Antimicrobial, y = group_avg, col= "Avg"))
oneway.test(grouo_avg~Day*Antimicrobial, data = slurryDF_new)
oneway.test(group_avg~Day*Antimicrobial, data = slurryDF_new)
oneway.test(logCFU~Day*Antimicrobial, data = slurryDF_new)
oneway.test('CFU_ml..8'~Day*Antimicrobial, data = slurryDF_new)
oneway.test(CFU_ml..8~Day*Antimicrobial, data = slurryDF_new)
oneway.test(CFU/mL..8~Day*Antimicrobial, data = slurryDF_new)
oneway.test(slurryDF_new[,8]~Day*Antimicrobial, data = slurryDF_new)
oneway.test(group_avg~Day*Antimicrobial, data = slurryDF_new)
cor.test(slurryDF_new$Day*slurryDF_new$Antimicrobial, slurryDF_new$logCFU)
cor.test(unfactor(slurryDF_new$Day)*unfactor(slurryDF_new$Antimicrobial), slurryDF_new$logCFU)
cor.test(unfactor(slurryDF_new$Day), slurryDF_new$logCFU)
cor.test(as.numeric(slurryDF_new$Day), slurryDF_new$logCFU)
slurryDF_new$numtrt = c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
head(slurryDF_new)
cor.test(as.numeric(slurryDF_new$Day)*slurryDF_new$numtrt, slurryDF_new$logCFU)
mod = lm(logCFU~as.numeric(Day)*numtrt, slurryDF_new)
anova(mod)
summary(mod)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(faraway)
library(ggplot2)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
slurryDF$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
slurryDF$Day <- as.factor(slurryDF$Day)
# Creates a log cfu factor
slurryDF$logCFU <- log(slurryDF$`CFU/mL...8`)
head(slurryDF)
str(slurryDF)
library(ggplot2)
library(dplyr)
slurryDF = slurryDF[complete.cases(slurryDF),]
slurryDF
slurryDF = slurryDF[complete.cases(slurryDF),]
slurryDF
Avgs <- slurryDF %>%
group_by(Antimicrobial) %>%
mutate(group_avg = mean(logCFU))
slurryDF_new = Avgs
slurryDF_new
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point() + geom_point(aes(x=Antimicrobial, y = group_avg, col= "Avg"))
oneway.test(group_avg~Day*Antimicrobial, data = slurryDF_new)
slurryDF_new$numtrt = c(1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6)
head(slurryDF_new)
cor.test(as.numeric(slurryDF_new$Day)*slurryDF_new$numtrt, slurryDF_new$logCFU, method = "Spearman")
cor.test(as.numeric(slurryDF_new$Day)*slurryDF_new$numtrt, slurryDF_new$logCFU, method = "spearman")
# create QQ plot of residuals
qqnorm(model$residuals)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(faraway)
# load data
data <- read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\EggWhiteData.xlsx")
#"/Users/youhashin/Library/CloudStorage/OneDrive-purdue.edu/Documents/SCS/24-001 [Joshua Martin]/EggWhiteData.xlsx")
head(data)
str(data)
# set `Antimicrobial` as factor
data$Antimicrobial <- as.factor(data$Antimicrobial)
# set `Day` as factor
data$Day <- as.factor(data$Day)
# rename T. Replicate
data$t_rep <- data$"T. Replicate"
# rename B. Replicate
data$b_rep <- as.factor(data$"B. Replicate")
# rename CFU/g to y
data$y <- data$"CFU/g (LOD=10)"
# set t_rep as factor
data$t_rep <- as.factor(data$t_rep)
# set b_rep as factor
data$b_rep <- as.factor(data$b_rep)
# Display the first few rows of the data
head(data)
# Display the structure of the data
str(data)
# Assuming your data is in a dataframe named 'eggwhite_data'
# Group by the relevant factors (excluding technical replicates)
# and calculate the mean CFU/g for each group
grouped_data <- data %>%
group_by(Day, Antimicrobial, b_rep) %>%
summarise(Avg_y = mean(y, na.rm = TRUE))
# Display the first few rows of the averaged data
head(grouped_data)
grouped_data
# create new col that takes log base 10 of Avg_y
grouped_data$log_y <- log10(grouped_data$Avg_y)
# Display the first few rows of the averaged data
grouped_data
# Display the structure of the averaged data
str(grouped_data)
# export grouped_data to excel
# write.csv(grouped_data, "EggWhiteData_Avg.csv")
# create QQ plot of residuals
qqnorm(model$residuals)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(faraway)
library(ggplot2)
slurryDF = read_excel("N:\\SCS\\SCS Client Files\\Active Summer 2024\\24-001 Martin\\Slurry2GraphsData.xlsx")
# set `Antimicrobial` as factor
slurryDF$Antimicrobial <- as.factor(slurryDF$Antimicrobial)
# set `Day` as factor
slurryDF$Day <- as.factor(slurryDF$Day)
# Creates a log cfu factor
slurryDF$logCFU <- log(slurryDF$`CFU/mL...8`)
head(slurryDF)
str(slurryDF)
slurryDF[,c(1,2,6,7,8,9)]
# plot histogram and kernel for log_y
hist(slurryDF$logCFU)
plot(density(slurryDF$logCFU))
tempDF = slurryDF[complete.cases(slurryDF),]
library(stats)
model <- lm(logCFU ~ Day * Antimicrobial, data = tempDF)
# Conduct an ANOVA to assess the significance of the factors and their interaction
anova_result <- anova(model)
# Print the ANOVA results
print(anova_result)
summary(model)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(model))
# Print the results
print(tukey_result)
# create QQ plot of residuals
qqnorm(model$residuals)
# add a reference line
qqline(model$residuals)
# create a histogram of residuals
hist(model$residuals)
# create a kernel density plot of residuals
plot(density(model$residuals))
# create a scatter plot of residuals vs. fitted values
plot(model$fitted.values, model$residuals)
library(ggplot2)
library(dplyr)
slurryDF = slurryDF[complete.cases(slurryDF),]
slurryDF
Avgs <- slurryDF %>%
group_by(Antimicrobial) %>%
mutate(group_avg = mean(logCFU))
slurryDF_new = Avgs
slurryDF_new
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point() + geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Average"))
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point() + geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average log(CFU/ML)"))
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point() + geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average"))
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) + geom_point() + geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average")) + ggtitle("Antimicrobial Treatment vs log(CFU/mL)")
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) +
geom_point() +
geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average")) +
ggtitle("Antimicrobial Treatment vs log(CFU/mL)")
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) +
geom_point() + #Plots the averaged values for the days
geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average")) + # Plots the averaged values for the Antimicrobials
ggtitle("Antimicrobial Treatment vs log(CFU/mL)")
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) +
geom_point() + #Plots the averaged values for the days
geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average")) + # Plots the averaged values for the Antimicrobials
ggtitle("Antimicrobial Treatment vs log(CFU/mL)", "Data gathered from Slurry2")
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) +
geom_point() + #Plots the averaged values for the days
geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average")) + # Plots the averaged values for the Antimicrobials
ggtitle("Antimicrobial Treatment vs log(CFU/mL)", "Data from = Slurry2")
ggplot(slurryDF_new, aes(x=Antimicrobial, y = logCFU, col = Day)) +
geom_point() + #Plots the averaged values for the days
geom_point(aes(x=Antimicrobial, y = group_avg, col= "Antimicrobial Group Average")) + # Plots the averaged values for the Antimicrobials
ggtitle("Antimicrobial Treatment vs log(CFU/mL)")
